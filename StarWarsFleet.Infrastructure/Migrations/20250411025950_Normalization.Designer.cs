// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StarWarsFleet.Infrastructure.Data;

#nullable disable

namespace StarWarsFleet.Infrastructure.Migrations
{
    [DbContext(typeof(StarWarsDbContext))]
    [Migration("20250411025950_Normalization")]
    partial class Normalization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.DockingSlotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.HasIndex("ShipId")
                        .IsUnique()
                        .HasFilter("[ShipId] IS NOT NULL");

                    b.ToTable("DockingSlots", (string)null);
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.FactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Factions", (string)null);
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.GarageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SpaceStationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpaceStationId");

                    b.ToTable("Garages", (string)null);
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.ShipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Ships", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.SpaceStationEntity", b =>
                {
                    b.HasBaseType("StarWarsFleet.Domain.Entities.ShipEntity");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("FactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOperational")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FactionId");

                    b.ToTable("SpaceStations", (string)null);
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.DockingSlotEntity", b =>
                {
                    b.HasOne("StarWarsFleet.Domain.Entities.GarageEntity", "GarageEntity")
                        .WithMany("Slots")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsFleet.Domain.Entities.ShipEntity", "ShipEntity")
                        .WithOne("DockingSlotEntity")
                        .HasForeignKey("StarWarsFleet.Domain.Entities.DockingSlotEntity", "ShipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GarageEntity");

                    b.Navigation("ShipEntity");
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.GarageEntity", b =>
                {
                    b.HasOne("StarWarsFleet.Domain.Entities.SpaceStationEntity", "SpaceStationEntity")
                        .WithMany("Garages")
                        .HasForeignKey("SpaceStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpaceStationEntity");
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.SpaceStationEntity", b =>
                {
                    b.HasOne("StarWarsFleet.Domain.Entities.FactionEntity", "FactionEntity")
                        .WithMany("SpaceStations")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsFleet.Domain.Entities.ShipEntity", null)
                        .WithOne()
                        .HasForeignKey("StarWarsFleet.Domain.Entities.SpaceStationEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactionEntity");
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.FactionEntity", b =>
                {
                    b.Navigation("SpaceStations");
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.GarageEntity", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.ShipEntity", b =>
                {
                    b.Navigation("DockingSlotEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("StarWarsFleet.Domain.Entities.SpaceStationEntity", b =>
                {
                    b.Navigation("Garages");
                });
#pragma warning restore 612, 618
        }
    }
}
